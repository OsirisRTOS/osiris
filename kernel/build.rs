use std::{collections::HashMap, fs::File, path::Path};

extern crate rand;
extern crate syn;
extern crate walkdir;

use std::io::Write;
use syn::{Attribute, LitInt};
use walkdir::WalkDir;

extern crate cbindgen;

fn select_arch() {
    let arch = std::env::var("ARCH").unwrap_or_else(|_| 
    {
        println!("cargo:error=ARCH environment variable not set. Please choose a target.");
        std::process::exit(1);
    });
    match arch.as_str() {
        "arm" => println!("cargo:rustc-cfg=feature=\"arm\""),
        "x86" => println!("cargo:rustc-cfg=feature=\"x86\""),
        "riscv" => println!("cargo:rustc-cfg=feature=\"riscv\""),
        _ => {
            println!("cargo:error=Unknown architecture '{}'", arch);
            std::process::exit(1);
        }
    }
}

fn main() {
    println!("cargo:rerun-if-changed=src");
    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=kernel/src/syscalls.rs");
    println!("cargo:rerun-if-env-changed=ARCH");

    select_arch();

    generate_syscall_map("src/syscalls").expect("Failed to generate syscall map.");

    // Get linker script from environment variable
    if let Ok(linker_script) = std::env::var("DEP_HAL_LINKER_SCRIPT") {
        println!("cargo:rustc-link-arg=-T{linker_script}");
    } else {
        println!("cargo:warning=LD_SCRIPT_PATH environment variable not set.");
    }

    // Check if the target is an arm architecture
}

fn generate_syscall_map<P: AsRef<Path>>(root: P) -> Result<(), std::io::Error> {
    let syscalls = collect_syscalls(root);

    let out_dir = std::env::var("OUT_DIR").unwrap();
    let out_path = Path::new(&out_dir).join("syscall_dispatcher.in");
    let mut file = File::create(out_path)?;

    writeln!(file, "// This file is generated by build.rs. Do not edit!")?;
    writeln!(file)?;
    writeln!(file, "match number {{")?;

    for (name, number) in &syscalls {
        writeln!(file, "    {number} => entry_{name}(args),")?;
    }

    writeln!(
        file,
        "    _ => panic!(\"Unknown syscall number: {{}}\", number),"
    )?;
    writeln!(file, "}}")?;

    Ok(())
}

fn is_syscall(attrs: &[Attribute], name: &str) -> Option<u16> {
    let mut num = 0;

    for attr in attrs {
        if attr.path().is_ident("syscall_handler") {
            let result = attr.parse_nested_meta(|meta| {
                if meta.path.is_ident("num") {
                    let raw = meta.value()?;
                    let value: LitInt = raw.parse()?;
                    num = value.base10_parse::<u16>()?;

                    if !(0..=255).contains(&num) {
                        return Err(meta.error(format!("invalid syscall number: {num}")));
                    }

                    return Ok(());
                }

                Err(meta.error(format!(
                    "unknown attribute '{}'",
                    meta.path.get_ident().unwrap()
                )))
            });

            if let Err(e) = result {
                println!("cargo:warning=Failed to parse syscall arguments for `{name}`, {e}");
                return None;
            }

            return Some(num);
        }
    }

    None
}

type SyscallData = u16;

fn collect_syscalls<P: AsRef<Path>>(root: P) -> HashMap<String, SyscallData> {
    let mut syscalls = HashMap::new();
    let mut numbers = HashMap::new();

    for entry in WalkDir::new(&root) {
        let entry = match entry {
            Ok(entry) => entry,
            Err(_) => continue,
        };

        if entry.file_type().is_file() {
            let path = entry.path();

            println!("Processing file: {}", path.display());

            let contents = match std::fs::read_to_string(path) {
                Ok(contents) => contents,
                Err(_) => continue,
            };

            let file = match syn::parse_file(&contents) {
                Ok(file) => file,
                Err(_) => continue,
            };

            for item in file.items {
                let item = match item {
                    syn::Item::Fn(item) => item,
                    _ => continue,
                };

                let name = item.sig.ident.to_string();

                if let Some(num) = is_syscall(&item.attrs, &name) {
                    if syscalls.contains_key(&name) {
                        println!("cargo:warning=Duplicate syscall handler: {name}");
                        continue;
                    }

                    if numbers.contains_key(&num) {
                        println!("cargo:warning=Duplicate syscall number: {num} for {name}");
                        continue;
                    }

                    syscalls.insert(name.clone(), num);
                    numbers.insert(num, name);
                }
            }
        }
    }

    syscalls
}
